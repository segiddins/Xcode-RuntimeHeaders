//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class IBICIdiom, IBICMipmapLevel, IBICPlatform, IBICRole, NSMutableDictionary, NSMutableSet;

@interface IBICSchema : NSObject
{
    NSMutableSet *_slotComponents;
    NSMutableSet *_slotComponentClasses;
    NSMutableDictionary *_slotsComponentsByClassThenIdentifier;
    NSMutableDictionary *_slotsComponentsByClass;
    NSMutableSet *_baseScales;
    NSMutableDictionary *_platformsByIdiom;
    NSMutableSet *_slots;
    NSMutableDictionary *_slotsBySlotClassByPlatformID;
    NSMutableDictionary *_slotsBySlotClass;
    NSMutableDictionary *_slotsToRequiredCounterparts;
    NSMutableDictionary *_slotsToRequiredCounterpartCollections;
    NSMutableDictionary *_slotsToLabels;
    NSMutableDictionary *_slotUpgradeForDeprecatedSlot;
    NSMutableDictionary *_stickersIconBundleDestinationsBySlot;
    NSMutableDictionary *_compilerResultAmendersBySlot;
    NSMutableDictionary *_suggestionSetsByIdentifierBySlotClass;
    NSMutableDictionary *_suggestionSetCounterpartsByIdentifierBySlotClass;
    NSMutableDictionary *_suggestedCounterpartsBySlotAndSlotComonentClass;
    NSMutableDictionary *_assetClassesToDetailFooterPathsToTitleGenerators;
    NSMutableDictionary *_slotMaskSetsBySlotByPlatform;
    NSMutableDictionary *_initialDeviceSpecificImageSetRepSlotsPerPlatform;
    NSMutableDictionary *_shouldIncludeOrientationInLaunchImageNameBySlot;
    NSMutableDictionary *_pixelSizesByLaunchImageSlots;
    NSMutableDictionary *_issueProvidersPerSlottedAssetClass;
    NSMutableDictionary *_catalogItemClassesToReferenceTypeNames;
    NSMutableDictionary *_referenceTypeNamesToCatalogItemClasses;
    NSMutableDictionary *_brandAssetCollectionSlotChildClasses;
    NSMutableSet *_catalogItemClasses;
    NSMutableSet *_appIconSlotsRequiringIdiomSuffixesInFileName;
    NSMutableSet *_launchImageSlotsRequiringIdiomSuffixesInFileName;
    NSMutableDictionary *_validationRecordsBySlotClass;
    NSMutableDictionary *_slotValidationRecordsBySlot;
    NSMutableSet *_fileTypes;
    NSMutableDictionary *_fileTypesBySlot;
    NSMutableDictionary *_fileTypesBySlotClass;
    NSMutableDictionary *_combinationsBySlotComponentClassAndIdiom;
    NSMutableDictionary *_defaultVariantAxesByClass;
    NSMutableDictionary *_catalogItemClassesByDirectoryExtension;
    NSMutableSet *_slotsToThin;
    NSMutableDictionary *_additionalSlotsByTypeAndIdiom;
    BOOL _isConstructing;
    IBICIdiom *_universalIdiom;
    IBICPlatform *_iOSPlatform;
    IBICPlatform *_OSXPlatform;
    IBICMipmapLevel *_baseMipmapLevel;
    IBICRole *_masterRole;
    IBICRole *_detailRole;
    IBICRole *_assignedRole;
    IBICRole *_unassignedRole;
}

+ (void)xctest_resetSharedInstance;
+ (BOOL)xctest_hasSharedInstance;
+ (id)sharedInstance;
+ (void)setSuppressSchemaValidationAsserts:(BOOL)arg1;
+ (void)setSchemaProvidersPromise:(CDUnknownBlockType)arg1;
@property(readonly) IBICRole *unassignedRole; // @synthesize unassignedRole=_unassignedRole;
@property(readonly) IBICRole *assignedRole; // @synthesize assignedRole=_assignedRole;
@property(readonly) IBICRole *detailRole; // @synthesize detailRole=_detailRole;
@property(readonly) IBICRole *masterRole; // @synthesize masterRole=_masterRole;
@property(readonly) IBICMipmapLevel *baseMipmapLevel; // @synthesize baseMipmapLevel=_baseMipmapLevel;
@property(readonly) IBICPlatform *OSXPlatform; // @synthesize OSXPlatform=_OSXPlatform;
@property(readonly) IBICPlatform *iOSPlatform; // @synthesize iOSPlatform=_iOSPlatform;
@property(readonly) IBICIdiom *universalIdiom; // @synthesize universalIdiom=_universalIdiom;
- (void).cxx_destruct;
- (void)ibic_generateSubNodes:(CDUnknownBlockType)arg1;
- (id)universalImageSetRepSlotsWithOnlyScales:(id)arg1 includeVector:(BOOL)arg2;
- (id)baseUniversalImageSetRepSlots;
- (id)fileTypeWithIdentifier:(id)arg1;
- (id)sizeWithPointSize:(struct CGSize)arg1;
- (id)scaleWithMultiple:(double)arg1;
- (id)baseScales;
- (void)addToBaseScales:(id)arg1;
- (id)sizeWithIdentifier:(id)arg1;
- (id)scaleWithIdentifier:(id)arg1;
- (id)idiomWithIdentifier:(id)arg1;
- (id)subtypeWithIdentifier:(id)arg1;
- (id)platformWithIdentifier:(id)arg1;
- (id)extentWithIdentifier:(id)arg1;
- (id)deviceOrientationWithIdentifier:(id)arg1;
- (id)validLaunchImageRepSlots;
- (id)validIconSetRepSlots;
- (id)validImageSetRepSlots;
- (id)sizes;
- (id)scales;
- (id)idioms;
- (id)subtypes;
- (id)platforms;
- (id)extents;
- (id)deviceOrientations;
- (id)initialSlotsOfType:(Class)arg1 forIdiom:(id)arg2 baseSlots:(id)arg3;
- (id)additionalSlotsOfType:(Class)arg1 forIdiom:(id)arg2;
- (void)setAdditionalSlots:(id)arg1 ofType:(Class)arg2 forIdiom:(id)arg3;
- (id)allFileUTIsToAllowInUnstructuredImport;
- (id)allFileExtensionsToAllowInUnstructuredImport;
- (Class)catalogItemClassForDirectoryExtension:(id)arg1;
- (Class)itemClassForCatalogReferenceTypeName:(id)arg1;
- (id)catalogReferenceTypeNameForItemClass:(Class)arg1;
- (id)primaryChildClassesForParentClass:(Class)arg1;
- (id)catalogItemClasses;
- (void)registerCatalogItemClass:(Class)arg1;
- (void)registerCatalogItemClasses:(id)arg1;
- (BOOL)isPossibleSlotToThin:(id)arg1;
- (void)addPossibleSlotsToThin:(id)arg1 expander:(id)arg2;
- (id)variantAxesForSlotComponentClasses:(id)arg1;
- (id)variantAxisForSlotComponentClass:(Class)arg1;
- (void)registerDefaultVariantAxis:(id)arg1;
- (id)orderedSlotComponentClassCombinationsForClass:(Class)arg1 andIdiom:(id)arg2;
- (id)combinationAxisForIdentifier:(id)arg1 slotComponentClass:(Class)arg2 idiom:(id)arg3;
- (void)addCombinationAxisWithValues:(id)arg1 identifier:(id)arg2 title:(id)arg3 displayOrder:(double)arg4 forIdioms:(id)arg5 forSlotComponentClass:(Class)arg6;
- (id)addCombinationAxisWithValues:(id)arg1 identifier:(id)arg2 title:(id)arg3 displayOrder:(double)arg4 forIdiom:(id)arg5 forSlotComponentClass:(Class)arg6;
- (id)fileTypeForExtension:(id)arg1;
- (id)fileExtensionsForSlot:(id)arg1;
- (id)validFileUTIsForSlotClass:(Class)arg1;
- (id)validFileExtensionsForSlotClass:(Class)arg1;
- (id)preferredFileTypeForSlotClass:(Class)arg1;
- (id)preferredFileTypeForSlot:(id)arg1;
- (id)fileTypesForSlotClass:(Class)arg1;
- (id)fileTypesForSlotInPreferenceOrder:(id)arg1;
- (id)fileTypesForSlot:(id)arg1;
- (void)addFileTypes:(id)arg1 forSlots:(id)arg2 expander:(id)arg3;
- (void)addFileTypes:(id)arg1 forSlot:(id)arg2 expander:(id)arg3;
- (void)addFileType:(id)arg1 forSlot:(id)arg2 expander:(id)arg3;
- (BOOL)isValidFileExtension:(id)arg1 forSlotClass:(Class)arg2;
- (BOOL)isValidFileExtension:(id)arg1 forSlot:(id)arg2;
- (id)fileTypes;
- (void)addFileTypes:(id)arg1;
- (void)addFileType:(id)arg1;
- (BOOL)launchImagesSupportedForPlatform:(id)arg1 andIdiom:(id)arg2;
- (id)launchImageSlotsRequiringPlaceholders;
- (void)addLaunchImageSlotsRequiringPlaceholder:(id)arg1;
- (void)addLaunchImageSlotsRequiringIdiomSuffixInFileName:(id)arg1;
- (BOOL)launchImageSlotShouldIncludeIdiomSuffixInFileName:(id)arg1;
- (void)setPixelSize:(id)arg1 forLaunchImageRepSlot:(id)arg2;
- (id)pixelSizeForLaunchImageRepSlot:(id)arg1;
- (void)setShouldIncludeOrientationInLaunchImageName:(BOOL)arg1 forSlot:(id)arg2;
- (BOOL)shouldIncludeOrientationInLaunchImageNameForSlot:(id)arg1;
- (void)addBundleIconSlotsRequiringIdiomSuffixInFileName:(id)arg1;
- (BOOL)bundleIconSlotShouldIncludeIdiomSuffixInFileName:(id)arg1;
- (id)universalImageRepSlots;
- (id)universalImageRepSlotSuggestionSets;
- (id)deviceSpecificImageRepSlotSuggestionSets;
- (BOOL)isImageSetRepSuggestionSetDeviceSpecific:(id)arg1;
- (void)addInitialDeviceSpecificImageSetRepSlots:(id)arg1 forPlatform:(id)arg2 expander:(id)arg3;
- (void)addInitialDeviceSpecificImageSetRepSlot:(id)arg1 forPlatform:(id)arg2 expander:(id)arg3;
- (id)initialDeviceSpecificImageSetRepSlotsForPlatform:(id)arg1;
- (void)setChildClass:(Class)arg1 forBrandAssetCollectionSlot:(id)arg2;
- (Class)childClassForBrandAssetCollectionSlot:(id)arg1;
- (id)issueProvidersForSlottedAssetClass:(Class)arg1;
- (void)addIssueProvider:(id)arg1 forSlottedAssetClass:(Class)arg2;
- (id)labelForSlot:(id)arg1;
- (void)setLabel:(id)arg1 forSlot:(id)arg2;
- (id)detailFooterTitleForDetailAreaGroupPath:(id)arg1 inGroupWithIdentifiers:(id)arg2 ofAssetClass:(Class)arg3;
- (void)setFooterTitle:(id)arg1 forDetailAreaGroupPath:(id)arg2 ofAssetClass:(Class)arg3;
- (void)setFooterTitleGenerator:(CDUnknownBlockType)arg1 forDetailAreaGroupPath:(id)arg2 ofAssetClass:(Class)arg3;
- (id)suggestedCounterpartsForSlot:(id)arg1;
- (id)suggestedCounterpartsForSlot:(id)arg1 andSlotComponentClass:(Class)arg2;
- (void)addSuggestedCounterpart:(id)arg1 forSlot:(id)arg2 andSlotComponentClass:(Class)arg3 isReciprical:(BOOL)arg4 expander:(id)arg5;
- (id)counterpartSuggestionSetsForSuggestionSet:(id)arg1;
- (id)suggestionSetWithIdentifier:(id)arg1 forSlotClass:(Class)arg2;
- (id)orderedSuggestionSetsForSlotClass:(Class)arg1;
- (id)suggestionSetsForSlotClass:(Class)arg1;
- (void)addSlotSuggestionSets:(id)arg1 compositingAsCounterpartsWithMode:(long long)arg2;
- (void)addSlotSuggestionSets:(id)arg1;
- (void)addSlotSuggestionSet:(id)arg1;
- (void)unionRequiredSlotEqualCounterparts:(id)arg1 variantAxes:(id)arg2;
- (void)unionRequiredSlotCounterparts:(id)arg1 variantAxes:(id)arg2;
- (void)addRequiredCounterpartCollection:(id)arg1 forSlot:(id)arg2;
- (id)requiredCounterpartCollectionForSlot:(id)arg1;
- (CDUnknownBlockType)compilerResultsAmenderForSlot:(id)arg1;
- (void)setSlot:(id)arg1 isAmendedBy:(CDUnknownBlockType)arg2;
- (long long)stickersIconBundleDestinationForSlot:(id)arg1;
- (void)setStickersIconBundleDestination:(long long)arg1 forSlots:(id)arg2;
- (void)setStickersIconBundleDestination:(long long)arg1 forSlot:(id)arg2;
- (id)upgradeSlotForDeprecatedSlot:(id)arg1;
- (void)addSlotUpgrade:(id)arg1 forDeprecatedSlot:(id)arg2;
- (BOOL)slotClass:(Class)arg1 hasCapability:(Class)arg2 forIdiom:(id)arg3;
- (id)validSlotsForSlotClass:(Class)arg1 andIdiom:(id)arg2;
- (id)validationRecordForSlot:(id)arg1;
- (id)validationRecordsForSlotClass:(Class)arg1;
- (void)addSlotValidationRecord:(id)arg1;
- (BOOL)isValidSlot:(id)arg1;
- (id)applicableSlotsOfClass:(Class)arg1 forPlatform:(id)arg2 targetIdioms:(id)arg3;
- (id)applicableSlotsOfClass:(Class)arg1 forPlatform:(id)arg2;
- (id)defaultSlotForClass:(Class)arg1;
- (id)validSlotsForSlotClass:(Class)arg1;
- (id)maskableSlotMasksOfClass:(Class)arg1 forIdioms:(id)arg2 onPlatform:(id)arg3;
- (void)markUniversalSlots:(id)arg1 asMaskedByDeviceSpecificSlots:(id)arg2 forPlatform:(id)arg3;
- (void)markSlot:(id)arg1 asMaskedBySlots:(id)arg2 forPlatform:(id)arg3;
- (void)addSlots:(id)arg1 withClass:(Class)arg2 applicablePlatforms:(id)arg3 expander:(id)arg4;
- (id)idiomsForPlatform:(id)arg1;
- (id)platformForIdiom:(id)arg1;
- (void)setPlatform:(id)arg1 forIdioms:(id)arg2;
- (void)setPlatform:(id)arg1 forIdiom:(id)arg2;
- (void)addAlternateIdentifier:(id)arg1 forSlotComponent:(id)arg2;
- (id)slotComponentIdentifiersForSlotClass:(Class)arg1;
- (id)orderedSlotComponentsForSlotClass:(Class)arg1;
- (id)slotComponentsForSlotComponentClass:(Class)arg1;
- (id)slotComponentOfClass:(Class)arg1 withIdentifier:(id)arg2;
- (void)addSlotComponents:(id)arg1;
- (void)addSlotComponent:(id)arg1;
- (void)addSlotComponentClasses:(id)arg1;
- (void)assignSlotComponentIDs;
- (void)assertSchemaValidity;
- (void)importDataFromProviders:(id)arg1;
- (id)init;

@end

