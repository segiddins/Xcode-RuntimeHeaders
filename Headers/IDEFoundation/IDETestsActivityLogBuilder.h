//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <IDEFoundation/IDETestRunSessionEvents-Protocol.h>

@class IDEActivityLogSection, IDEActivityLogSectionRecorder, IDEActivityLogUnitTestSectionRecorder, NSMapTable, NSString, _TtC13IDEFoundation28IDETestRunSpecificationGroup;
@protocol IDETestTargetRunner, IDETestsActivityLogBuilderDelegate;

@interface IDETestsActivityLogBuilder : NSObject <IDETestRunSessionEvents>
{
    BOOL _aBundleDidNotFinishSuccessfully;
    BOOL _testsFinishedSuccessfully;
    IDEActivityLogSection *_activityLogSection;
    id <IDETestsActivityLogBuilderDelegate> _delegate;
    NSMapTable *_stateForWorker;
    IDEActivityLogUnitTestSectionRecorder *_currentTestableRecorder;
    id <IDETestTargetRunner> _currentTargetRunner;
    _TtC13IDEFoundation28IDETestRunSpecificationGroup *_currentTestRunSpecificationGroup;
    IDEActivityLogSectionRecorder *_currentTestRunSpecificationGroupRecorder;
    NSString *_testPlanName;
}

+ (id)recursiveDescriptionForError:(id)arg1;
@property(copy) NSString *testPlanName; // @synthesize testPlanName=_testPlanName;
@property(retain) IDEActivityLogSectionRecorder *currentTestRunSpecificationGroupRecorder; // @synthesize currentTestRunSpecificationGroupRecorder=_currentTestRunSpecificationGroupRecorder;
@property(retain) _TtC13IDEFoundation28IDETestRunSpecificationGroup *currentTestRunSpecificationGroup; // @synthesize currentTestRunSpecificationGroup=_currentTestRunSpecificationGroup;
@property(retain) id <IDETestTargetRunner> currentTargetRunner; // @synthesize currentTargetRunner=_currentTargetRunner;
@property(retain) IDEActivityLogUnitTestSectionRecorder *currentTestableRecorder; // @synthesize currentTestableRecorder=_currentTestableRecorder;
@property(retain) NSMapTable *stateForWorker; // @synthesize stateForWorker=_stateForWorker;
@property __weak id <IDETestsActivityLogBuilderDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) IDEActivityLogSection *activityLogSection; // @synthesize activityLogSection=_activityLogSection;
@property BOOL testsFinishedSuccessfully; // @synthesize testsFinishedSuccessfully=_testsFinishedSuccessfully;
- (void).cxx_destruct;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 didFinishTestWithIdentifier:(id)arg3 withTestResult:(id)arg4 rawOutput:(id)arg5;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 didFailTestWithIdentifier:(id)arg3 withTestResultMessage:(id)arg4 rawOutput:(id)arg5;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testWithIdentifier:(id)arg3 didFinishActivity:(id)arg4;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testWithIdentifier:(id)arg3 willStartActivity:(id)arg4;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testWithIdentifier:(id)arg3 didMeasurePerformanceMetric:(id)arg4 rawOutput:(id)arg5;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testDidOutput:(id)arg3;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 didStartTestWithIdentifier:(id)arg3 withRawOutput:(id)arg4;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testSuiteDidFinish:(unsigned long long)arg3 withFailures:(unsigned long long)arg4 unexpected:(unsigned long long)arg5 testDuration:(double)arg6 totalDuration:(double)arg7 rawOutput:(id)arg8;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testSuite:(id)arg3 willFinishAt:(id)arg4 rawOutput:(id)arg5;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 testSuite:(id)arg3 didStartAt:(id)arg4 rawOutput:(id)arg5;
- (void)testRunSessionDidFinish:(id)arg1 withCancellation:(BOOL)arg2;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 willFinishWithSuccess:(BOOL)arg3 withError:(id)arg4;
- (void)worker:(id)arg1 testTargetRunner:(id)arg2 didLaunchWithDiagnosticLogPath:(id)arg3;
- (void)addSectionIfNecessaryForWorker:(id)arg1 diagnosticLogPath:(id)arg2;
- (void)testTargetRunner:(id)arg1 didEndWithCancellation:(BOOL)arg2;
- (void)testTargetRunnerDidStart:(id)arg1;
- (id)initWithActivityLogSection:(id)arg1 testPlanName:(id)arg2 delegate:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

