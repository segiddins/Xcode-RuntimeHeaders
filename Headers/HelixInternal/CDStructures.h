//
//     Generated by class-dump 3.5 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class MISSING_TYPE;

#pragma mark Named Structures

struct Box<helix::SimdTypes<float, 2>> {
    MISSING_TYPE *m_min__m_max;
};

struct Box<helix::SimdTypes<float, 3>> {
    MISSING_TYPE *m_min__m_max;
};

struct DefaultAccessorOctree {
    struct Octree3<helix::SimdTypes<float, 3>> octree;
};

struct DefaultAccessorQuadtree {
    struct Octree<helix::SimdTypes<float, 2>, helix::OctreeStruct<helix::SimdTypes<float, 2>>> quadtree;
};

struct DefaultAccessorSparseGrid {
    struct SparseGrid<helix::SimdTypes<float, 3>> sparseGrid;
};

struct DefaultAccessorSparseGrid2 {
    struct SparseGrid<helix::SimdTypes<float, 2>> sparseGrid;
};

struct DefaultAllocator;

struct DefaultQueryWorkingData {
    struct QueryWorkingData workingData;
};

struct Deletable;

struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 2>>::OctCellData, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct OctCellData *m_data;
};

struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 2>>::OctObjectData, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct OctObjectData *m_data;
};

struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 3>>::OctCellData, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct OctCellData *m_data;
};

struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 3>>::OctObjectData, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct OctObjectData *m_data;
};

struct DynamicArray<helix::QueryWorkingData::QueryHeap::QueryHeapItem, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct QueryHeapItem *m_data;
};

struct DynamicArray<helix::SparseGridStruct<helix::SimdTypes<float, 2>>::SparseGridObject, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct SparseGridObject *m_data;
};

struct DynamicArray<helix::SparseGridStruct<helix::SimdTypes<float, 3>>::SparseGridObject, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    struct SparseGridObject *m_data;
};

struct DynamicArray<unsigned char, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    char *m_data;
};

struct DynamicArray<unsigned int, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int *m_data;
};

struct DynamicArray<unsigned long long, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned long long *m_data;
};

struct DynamicArray<unsigned long, helix::DefaultAllocator> {
    struct DefaultAllocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned long long *m_data;
};

struct DynamicBitset<helix::DefaultAllocator> {
    struct DynamicArray<unsigned long long, helix::DefaultAllocator> m_word;
    unsigned long long m_size;
};

struct IndexSet<unsigned int, helix::DefaultAllocator> {
    struct DynamicBitset<helix::DefaultAllocator> m_memberBits;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_indices;
};

struct OctCellData;

struct OctObjectData;

struct Octree3<helix::SimdTypes<float, 3>> {
    struct OctreeStruct3<helix::SimdTypes<float, 3>> m_data;
};

struct Octree<helix::SimdTypes<float, 2>, helix::OctreeStruct<helix::SimdTypes<float, 2>>> {
    struct OctreeStruct<helix::SimdTypes<float, 2>> m_data;
};

struct OctreeArrays {
    struct SmallArraysAllocator<unsigned int, helix::DefaultAllocator> m_data;
};

struct OctreeStruct3<helix::SimdTypes<float, 3>> {
    _Bool m_initialized;
    _Bool m_keepSubCellObjectList;
    unsigned char m_maxDepth;
    float m_smallestWorldCellSize;
    unsigned char m_actualMaxDepth;
    unsigned int m_objectCount;
    struct Box<helix::SimdTypes<float, 3>> m_bbox;
    struct Box<helix::SimdTypes<float, 3>> m_gridBbox;
    unsigned int m_worldToGridScale__m_gridToWorldScale__m_rootCellIndex;
    unsigned int m_infiniteBVolObjectsCellIndex;
    struct OctreeArrays m_packedMemberLists;
    struct SimpleAllocator<helix::OctreeStruct<helix::SimdTypes<float, 3>>::OctCellData, helix::DefaultAllocator> m_packedCellData;
    struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 3>>::OctObjectData, helix::DefaultAllocator> m_objectData;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_dirtyObjects;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_dirtyCellsPerDepth[15];
    unsigned int m_deletedDirtyCellsCount;
    unsigned int m_debugValidateCount;
    struct IndexSet<unsigned int, helix::DefaultAllocator> m_tempIndexSet;
    struct DynamicArray<unsigned char, helix::DefaultAllocator> m_tempByteData;
};

struct OctreeStruct<helix::SimdTypes<float, 2>> {
    _Bool m_initialized;
    _Bool m_keepSubCellObjectList;
    unsigned char m_maxDepth;
    float m_smallestWorldCellSize;
    unsigned char m_actualMaxDepth;
    unsigned int m_objectCount;
    struct Box<helix::SimdTypes<float, 2>> m_bbox;
    struct Box<helix::SimdTypes<float, 2>> m_gridBbox;
    unsigned int m_worldToGridScale__m_gridToWorldScale__m_rootCellIndex;
    unsigned int m_infiniteBVolObjectsCellIndex;
    struct OctreeArrays m_packedMemberLists;
    struct SimpleAllocator<helix::OctreeStruct<helix::SimdTypes<float, 2>>::OctCellData, helix::DefaultAllocator> m_packedCellData;
    struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 2>>::OctObjectData, helix::DefaultAllocator> m_objectData;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_dirtyObjects;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_dirtyCellsPerDepth[15];
    unsigned int m_deletedDirtyCellsCount;
    unsigned int m_debugValidateCount;
    struct IndexSet<unsigned int, helix::DefaultAllocator> m_tempIndexSet;
    struct DynamicArray<unsigned char, helix::DefaultAllocator> m_tempByteData;
};

struct QueryHeap {
    struct DynamicArray<helix::QueryWorkingData::QueryHeap::QueryHeapItem, helix::DefaultAllocator> m_heapItems;
};

struct QueryHeapItem;

struct QueryWorkingData {
    struct IndexSet<unsigned int, helix::DefaultAllocator> m_visitedItems;
    struct DynamicBitset<helix::DefaultAllocator> m_tempBits;
    struct QueryHeap m_heap;
    struct Deletable *m_userData;
    _Bool m_deleteUserData;
};

struct SimpleAllocator<helix::OctreeStruct<helix::SimdTypes<float, 2>>::OctCellData, helix::DefaultAllocator> {
    struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 2>>::OctCellData, helix::DefaultAllocator> m_storage;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_freeIndices;
};

struct SimpleAllocator<helix::OctreeStruct<helix::SimdTypes<float, 3>>::OctCellData, helix::DefaultAllocator> {
    struct DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 3>>::OctCellData, helix::DefaultAllocator> m_storage;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_freeIndices;
};

struct SmallArraysAllocator<unsigned int, helix::DefaultAllocator> {
    unsigned int *m_buffer;
    unsigned long long m_capacity;
    unsigned long long m_count;
    struct DynamicBitset<helix::DefaultAllocator> m_freeData;
    unsigned long long m_freeDataCount;
    struct DynamicArray<unsigned long, helix::DefaultAllocator> m_freeBlocsListUpperPow2;
};

struct SparseGrid<helix::SimdTypes<float, 2>> {
    struct SparseGridStruct<helix::SimdTypes<float, 2>> m_data;
};

struct SparseGrid<helix::SimdTypes<float, 3>> {
    struct SparseGridStruct<helix::SimdTypes<float, 3>> m_data;
};

struct SparseGridObject;

struct SparseGridStruct<helix::SimdTypes<float, 2>> {
    struct SmallArraysAllocator<unsigned int, helix::DefaultAllocator> m_data;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_hashToData;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_veryLargeObjects;
    struct DynamicArray<helix::SparseGridStruct<helix::SimdTypes<float, 2>>::SparseGridObject, helix::DefaultAllocator> m_objects;
    unsigned long long m_objectCount;
    unsigned int m_hashDivisor;
    float m_cellSize;
    float m_cellSizeVec__m_invCellSize;
    _Bool m_gridOrigin__m_initialized;
    _Bool m_veryLargeListDirty;
    unsigned long long m_initialObjectCount;
    struct Box<helix::SimdTypes<float, 2>> m_initialBBox;
    struct Box<helix::SimdTypes<float, 2>> m_currentBBox;
    _Bool m_autoCellSize;
    float m_cellSizeHint;
    float m_autoCellSizeMultiplierHint;
    double m_volumeObjectSizeSum;
    unsigned long long m_volumeObjectCount;
    float m_initialVolumePerObject;
};

struct SparseGridStruct<helix::SimdTypes<float, 3>> {
    struct SmallArraysAllocator<unsigned int, helix::DefaultAllocator> m_data;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_hashToData;
    struct DynamicArray<unsigned int, helix::DefaultAllocator> m_veryLargeObjects;
    struct DynamicArray<helix::SparseGridStruct<helix::SimdTypes<float, 3>>::SparseGridObject, helix::DefaultAllocator> m_objects;
    unsigned long long m_objectCount;
    unsigned int m_hashDivisor;
    float m_cellSize;
    float m_cellSizeVec__m_invCellSize;
    _Bool m_gridOrigin__m_initialized;
    _Bool m_veryLargeListDirty;
    unsigned long long m_initialObjectCount;
    struct Box<helix::SimdTypes<float, 3>> m_initialBBox;
    struct Box<helix::SimdTypes<float, 3>> m_currentBBox;
    _Bool m_autoCellSize;
    float m_cellSizeHint;
    float m_autoCellSizeMultiplierHint;
    double m_volumeObjectSizeSum;
    unsigned long long m_volumeObjectCount;
    float m_initialVolumePerObject;
};

#pragma mark Typedef'd Structures

typedef struct {
    MISSING_TYPE *_field1[3];
} CDStruct_d80e62f2;

typedef struct {
    MISSING_TYPE *_field1[4];
} CDStruct_f1db2b5e;

typedef struct {
    float _field1;
} CDStruct_37a3040a;

