//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface HXOctreeF : NSObject
{
    // Error parsing type: {DefaultAccessorOctree="octree"{Octree3<helix::SimdTypes<float, 3> >="m_data"{OctreeStruct3<helix::SimdTypes<float, 3> >="m_initialized"B"m_keepSubCellObjectList"B"m_maxDepth"C"m_smallestWorldCellSize"f"m_actualMaxDepth"C"m_objectCount"I"m_bbox"{Box<helix::SimdTypes<float, 3> >="m_min""m_max"}"m_gridBbox"{Box<helix::SimdTypes<float, 3> >="m_min""m_max"}"m_worldToGridScale""m_gridToWorldScale""m_rootCellIndex"I"m_infiniteBVolObjectsCellIndex"I"m_packedMemberLists"{OctreeArrays="m_data"{SmallArraysAllocator<unsigned int, helix::DefaultAllocator>="m_buffer"^I"m_capacity"Q"m_count"Q"m_freeData"{DynamicBitset<helix::DefaultAllocator>="m_word"{DynamicArray<unsigned long long, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^Q}"m_size"Q}"m_freeDataCount"Q"m_freeBlocsListUpperPow2"{DynamicArray<unsigned long, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^Q}}}"m_packedCellData"{SimpleAllocator<helix::OctreeStruct<helix::SimdTypes<float, 3> >::OctCellData, helix::DefaultAllocator>="m_storage"{DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 3> >::OctCellData, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^{OctCellData}}"m_freeIndices"{DynamicArray<unsigned int, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^I}}"m_objectData"{DynamicArray<helix::OctreeStruct<helix::SimdTypes<float, 3> >::OctObjectData, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^{OctObjectData}}"m_dirtyObjects"{DynamicArray<unsigned int, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^I}"m_dirtyCellsPerDepth"[15{DynamicArray<unsigned int, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^I}]"m_deletedDirtyCellsCount"I"m_debugValidateCount"I"m_tempIndexSet"{IndexSet<unsigned int, helix::DefaultAllocator>="m_memberBits"{DynamicBitset<helix::DefaultAllocator>="m_word"{DynamicArray<unsigned long long, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^Q}"m_size"Q}"m_indices"{DynamicArray<unsigned int, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"^I}}"m_tempByteData"{DynamicArray<unsigned char, helix::DefaultAllocator>="m_allocator"^{DefaultAllocator}"m_capacity"Q"m_size"Q"m_data"*}}}}, name: m_octStruct
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)getClosestFromPosition:(float)arg1 transformScaling:(id)arg2 maximumUnscaledDistance:(id)arg3 workingData:result: /* Error: Ran out of types for this method. */;
- (void)raycastWithStart:(BOOL)arg1 unitDirection:(float)arg2 doubleSided:(id)arg3 maximumDistance:(id)arg4 workingData:result: /* Error: Ran out of types for this method. */;
- (void)getObjectsIntersectingLineOfType:(long long)arg1 startPoint:(id)arg2 endPoint:result: /* Error: Ran out of types for this method. */;
-     // Error parsing type: v104@0:8f16f20f24f28{?=[4]}32@96, name: getObjectsInFrustumWithLocalNear:localFar:localNearWidth:localNearHeight:transformedBy:result:
- (void)getObjectsInConeAt:(float)arg1 direction:(float)arg2 length:(id)arg3 radius:result: /* Error: Ran out of types for this method. */;
-     // Error parsing type: v120@0:8{?=f}16{?=[4]}48@112, name: getObjectsInSphere:transformedBy:result:
- (void)getObjectsInSphere:(CDStruct_37a3040a)arg1 result:(id)arg2;
-     // Error parsing type: v120@0:8{?=}16{?=[4]}48@112, name: getObjectsInBox:transformedBy:result:
- (void)getObjectsInBox:(struct)arg1 result:(id)arg2;
- (void)getObjectsContainingPoint:(id)arg1 result: /* Error: Ran out of types for this method. */;
- (void)prepareForQueries:(long long)arg1;
- (void)updateUpTo:(long long)arg1;
- (void)removeObject:(long long)arg1;
- (CDStruct_37a3040a)getBoundingSphereOfObject:(long long)arg1;
- (struct)getBoundingBoxOfObject:(long long)arg1;
- (void)setObject:(long long)arg1 withBoundingSphere:(CDStruct_37a3040a)arg2;
- (void)setObject:(long long)arg1 withBoundingBox:(struct)arg2;
- (BOOL)isObjectValid:(long long)arg1;
@property(readonly) struct octreeBoundingBox;
@property long long maximumDepth;
@property(nonatomic) long long objectIndexRange;
- (id)initWithMaximumDepth:(long long)arg1;
- (id)init;

@end

